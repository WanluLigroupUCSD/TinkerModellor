from typing import List, Union
import numpy as np
import warnings
from io import StringIO
from dataclasses import dataclass
import os

from tinkermodellor.messager import TinkerSystemReminder

    # This module is dedicated to managing and storing essential data extracted from Tinker format files, including .xyz files commonly used in molecular simulations. 
    #Usage: 
    #tinker_system = TinkerSystem()
    #tinker_system.read_from_tinker(tinker_xyz='path/to/your/tinker.xyz')
    #tinker_system.write('path/to/your/output.xyz')
    #tinker_system.check()             # Check the data of TinkerSystem, We recommand to use this function to check the data before you write it.

    # Information can be accessed as follows:
    #   tinker_system.AtomTypesStr     # List of atom types in string format for the molecule. Provides a clear understanding of the chemical nature of each atom.
    #   tinker_system.AtomTypesNum     # Numeric representations of atom types, facilitating computational analyses and comparisons.
    #   tinker_system.Bonds            # A comprehensive list detailing the bonds between atoms, crucial for recognizing molecular connectivity and structure.
    #   tinker_system.AtomNums         # Total number of atoms within the molecule, indicating its size and complexity.
    #   tinker_system.AtomCrds         # Array of atomic coordinates (in Angstroms), representing the spatial configuration of the molecule.
    #   tinker_system.SystemName       # The name assigned to the system, useful for identification and documentation.
    #   tinker_system.AtomIndex        # Indexes of atoms in the system, providing a reference framework for other data structures.
    #   tinker_system.BoxSize          # Dimensions of the simulation box (defaulted to [0.0, 0.0, 0.0]),
    #                                  # vital for simulations employing periodic boundary conditions.
    #   tinker_system.BoxAngle         # Angles of the simulation box (defaulted to [90.0, 90.0, 90.0]),
    #                                  # necessary for accurately defining the simulation space.

@dataclass
class TinkerSystem() :
        
    def __init__(self, system_name:str = None) -> None :

        #Used for store the molecule Numbers
        self.AtomNums: int = 0        

        if system_name == None:
            self.SystemName = 'TinkerModellor Default Name'
        else:
            if isinstance(system_name,str):
                self.SystemName = system_name
            else:
                raise TypeError('MoleculeName must be a string')
            
        #Used for store the atom index
        self.AtomIndex: np.array = []
        #Used for store the atom type in string
        self.AtomTypesStr: list[str] = []
        #Used for store the molecule coordinates
        self.AtomCrds: np.array  # Angstrom
        #Used for store the atom type in number
        self.AtomTypesNum: np.array = []
        #Used for store the molecular bond
        self.Bonds: Union[List[List[int]],List[List[str]]] = []
        #Used for store the box size and angle
        self.BoxSize: np.array = np.array([0.0, 0.0, 0.0])
        self.BoxAngle: np.array = np.array([90.0,90.0,90.0])

    def __str__(self) -> str:
        contents = []

        # 1st line: number of atoms + system_name
        contents.append(f" {self.AtomNums:5d}  {self.SystemName} Generated by TinkerModellor, Author:Xujian Wang, Junhong Li & Haodong Liu")

        # if with pbc info
        if isinstance(self.BoxSize, np.ndarray):
            if not np.allclose(self.BoxSize, np.zeros(3)):
                contents.append(
                " "
                f"{self.BoxSize[0]:12.6f}"
                f"{self.BoxSize[1]:12.6f}"
                f"{self.BoxSize[2]:12.6f}"
                f"{self.BoxAngle[0]:12.6f}"
                f"{self.BoxAngle[1]:12.6f}"
                f"{self.BoxAngle[2]:12.6f}"
            )
        else:
            raise TypeError('BoxSize must be a numeric numpy array')

        # atoms
        for i in range(self.AtomNums):
            # Check if AtomTypesNum is an integer. If so, format it as an integer.
            # If AtomTypesNum is None, use the string 'None'.
            # If AtomTypesNum is a non-integer value, attempt to convert it to an integer.
            # If the conversion fails, keep it as a string but ensure alignment in output.
            if isinstance(self.AtomTypesNum[i], int):
                atom_type_num_str = f"{self.AtomTypesNum[i]:d}"
            elif self.AtomTypesNum[i] is None:
                atom_type_num_str = 'None'
            else:
                try:
                    atom_type_num_str = f"{int(self.AtomTypesNum[i]):d}"  # Attempt to convert to integer
                except ValueError:
                    atom_type_num_str = str(self.AtomTypesNum[i])  # Keep as string if conversion fails

            # Format the string for each atom including its index, type, coordinates, and type number.
            # Ensure that the atom type number is aligned correctly without decimal points for integers.
            contents.append(
                f"{(i + 1):5d}  {self.AtomTypesStr[i]:<6}"
                f"{self.AtomCrds[i, 0]:12.6f} "
                f"{self.AtomCrds[i, 1]:12.6f} "
                f"{self.AtomCrds[i, 2]:12.6f} "
                f"{atom_type_num_str:>6}"  # Ensure correct alignment and formatting
            )

            # Append the indices of atoms bonded to the current atom, formatted with appropriate spacing.
            for connect in self.Bonds[i]:
                contents[-1] += f"{connect:6d}"


        return "\n".join(contents)

    @TinkerSystemReminder
    def read_from_tinker(
        self,
        tinker_xyz: str,
    ) -> "TinkerSystem":
        """Load molecule from input tinker xyz file.

        Args:
            tinker_xyz (str): Path to input tinker xyz file.

        Returns:
            txyz_mol (TXYZMol): A tinker molecule.
        """

        file = os.path.abspath(tinker_xyz)
        if isinstance(file, str):
            with open(file) as f:
                contents = f.readlines()
        elif isinstance(file, StringIO):
            contents = file.getvalue().split("\n")

        atom_nums = 0
        system_name = None
        atom_index = []
        atom_type_str = []
        atom_crds = []
        atom_type_num = []
        atom_bonds = []
        box_size = np.array([0.0, 0.0, 0.0])  # 修改默认值为零向量

        for (line_idx, line) in enumerate(contents):
            line = line.rstrip()
            if len(line) == 0:
                continue

            if line_idx == 0:
                arr = line.split()
                atom_nums = int(arr.pop(0))
                system_name = " ".join(arr)
                continue

            if line_idx == 1:
                try:
                    box_size = np.array([float(x) for x in line.split()[0:3]])
                    continue
                except ValueError:
                    warnings.warn("No PBC box info found in tinker file.")
                finally:
                    pass

            arr = line.split()
            atom_index.append(int(arr[0]))
            atom_type_str.append(arr[1])
            atom_crds.append([float(x) for x in arr[2:5]])
            atom_type_num.append(int(arr[5]))
            atom_bonds.append([int(x) for x in arr[6:]])

        atom_crds = np.array(atom_crds)

        if len(atom_crds) != atom_nums:
            warnings.warn(
                f"The number of atoms ({atom_nums}) does not match the size of"
                f" atom_crds {atom_crds.shape}, reset the number of atoms to "
                f"{len(atom_crds)}."
            )
            atom_nums = len(atom_crds)

        self.AtomNums = atom_nums
        self.SystemName = system_name
        self.AtomIndex = atom_index
        self.AtomTypesStr = atom_type_str
        self.AtomCrds = atom_crds
        self.AtomTypesNum = atom_type_num
        self.Bonds = atom_bonds
        self.BoxSize = box_size

    
    def write(self, file_path):
        with open(file_path, 'w') as f:
            f.write(self.__str__())
    
    def check(self):
        #   TinkerSystem specific check
        assert len(self.AtomTypesNum) == len(self.AtomTypesStr) == len(self.Bonds) == len(self.AtomCrds)\
            == len(self.AtomIndex)+1 == self.AtomNums, f'TinkerSystem data length is not equal to AtomNums,\
            AtomNums = {self.AtomNums}, AtomTypesNum = {len(self.AtomTypesNum)}, AtomTypesStr = {len(self.AtomTypesStr)},\
            Bonds = {len(self.Bonds)}, AtomCrds = {len(self.AtomCrds)}, AtomIndex = {len(self.AtomIndex)+1}' #AtomIndex is from 1 to AtomNums
        if 'None' in self.AtomTypesStr:
            print('WARNING!!! Atomtype "None" is found in the system, please check the force field')